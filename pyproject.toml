[tool.poetry]
name = "Robomania"
version = "0.4.2"
description = "Bot for discord server"
authors = ["June Gierada <vlaska8888@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.11"
disnake = "^2.5.2"
aiohttp = "^3.8.1"
motor = {extras = ["srv"], version = "^3.0.0"}
Pillow = "^9.2.0"
pytesseract = "^0.3.10"
python-dotenv = "^0.21.0"
click = "^8.1.3"
typing-extensions = "^4.3.0"
attrs = "^22.1.0"
validators = "^0.20.0"
pytz = "^2022.2.1"
pydantic = "^2"
Arpeggio = "^2.0.0"
numpy = "^1.24.1"
httpx = "^0.23.3"
requests = "^2.31.0"
fastapi = {version = "^0.100", extras = ["all"]}

[tool.poetry.group.dev.dependencies]
isort = "*"
mypy = "*"
types-pytz = "^2022.2.1.0"
hypothesis = "^6.56.4"
types-requests = "^2.28.11.15"
black = "*"
ruff = "*"
pre-commit = "^3.1.1"
motor-types = "^1.0.0b2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.3"
mongomock-motor = "^0.0.12"
Faker = "^14.2.0"
pytest-asyncio = "^0.19.0"
pytest-httpserver = "^1.0.5"
pytest-mock = "^3.8.2"
pytest-dotenv = "^0.5.2"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
  "tests",
]
asyncio_mode = "strict"
addopts = "--cov=src/robomania --cov-report html --cov-report xml:cov.xml"

[tool.mypy]
python_version = "3.11"
show_error_codes = true
ignore_missing_imports = true
plugins = [
  "disnake.ext.mypy_plugin",
  "pydantic.mypy",
  "numpy.typing.mypy_plugin"
]

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.isort]
profile = "black"

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
select = [
  "E",        # pycodestyle (errorss)
  "F",        # pyflakes
  "C4",       # flake8-comprehensions
  "PT",       # flake8-pytest
  "C90",      # mccabe
  "N",        # pep8-naming
  "UP",       # pyupgrade
  "ANN",      # flake8-annotations
  "ASYNC",    # flake8-async
  "S",        # flake8-bandit
  "BLE",      # flake8-blind-except
  "B",        # flake8-bugbear
  "A",        # flake8-builtins
  "COM",      # flake8-commas
  "FA",       # flake8-future-annotations
  "ISC",      # flake8-implicit-str-concat
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "INP",      # flake8-no-pep420
  "PIE",      # flake8-pie
  "T20",      # flake8-print
  "PYI",      # flake8-pyi
  "Q",        # flake8-quotes
  "RSE",      # flake8-raise
  "RET",      # flake8-return
  "SIM",      # flake8-simplify
  "TID",      # flake8-tidy-imports
  "TCH",      # flake8-type-checking
  "PTH",      # flake8-use-pathlib
  "ERA",      # eradicate
  "PL",       # pylint
  "TRY",      # tryceratops
  "PERF",     # perflint
  "RUF",      # ruff
]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
line-length = 88
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore=[
  "G004",     # Logging statement uses f-string
  "ANN101",   # Missing type annotation for {name} in method
  "ANN102",   # Missing type annotation for {name} in classmethod
  "COM812",   # Trailing comma missing
]

[tool.ruff.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.Query",
  "fastapi.Header",
  "fastapi.Path",
]

[tool.ruff.flake8-builtins]
builtins-ignorelist = [
  "id",
  "eval",
]

[tool.coverage.run]
source = ["src/robomania"]
omit = ["src/robomania/cogs/tester.py", "src/robomania/cogs/planner.py"]

[tool.coverage.report]
skip_empty = true
exclude_lines = [
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "def __str__",
  "def __repr__",
  "pragma: no cover",
  "@click",
  "if Config.debug:",
  "raise NotImplementedError"
]
